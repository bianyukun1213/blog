[{"title":"IndieWeb Implementation Test","url":"/en/posts/127efb3.html","content":"Life is about fiddling around with things, I guess… AI-generated summaryThe author describes their journey of modifying their blog to engage with the IndieWeb community. They implemented technologies like IndieAuth, RelMeAuth, microformats, and Webmention, despite facing challenges with their theme's CSS. They successfully integrated these features and plan to parse and display Webmentions using webmention.js. They acknowledge the need to balance this work with their graduation project. After making a multilingual modification to my blog, I started a new journey fiddling around with it. This website uses tags forked from Kristof Zerbe ’s hexo-tag-plugins repository. Through Kristof’s articles, I learned about the IndieWeb community, which led me to other technologies that associated with it, like microformats , IndieAuth , RelMeAuth , Webmention , etc. It turns out that there is a bunch of people in the world who use their indie websites as primary online identities, and also use a set of open technologies and standards to communicate and interact with each other on their websites. 不觉得这很酷吗？作为一名理工男我觉得这太酷了，很符合我对未来生活的想象，科技并带着趣味。 [1] I’d like to try to be part of that community. I have already got an indie website and my personal domain. The implementation of IndieAuth and RelMeAuth support is also easy. The next thing is to implement microformats and Webmention. So I referred to Kristof’s three tutorials: “Hexo and the IndieWeb” , “Hexo and the IndieWeb (Sending Webmentions)” , and “Hexo and the IndieWeb (Receiving Webmentions)” , along with other resources such as “webmention 实现参考” by Runye , “透過 webmention 來搜集 blog 的社群迴響” by Jason Chen , to make some modifications to my blog. There were some hiccups during the modification. Redefine , the Hexo theme I use, uses Tailwind CSS to write some of its styles, which leaves many class names that start with h- in the HTML structure, causing some microformats parsers to generate incorrect results. So I had to use a filter to make some changes to the theme by replacing class names that start with h-, with other class names. After the replacement, the h-entry I made seems to be parsed correctly. For interactive links that require special class names like u-in-reply-to, u-like-of, I would write them in the front-matter, insert them into the page with a filter and hide them. After testing, I found that it is better to insert only one interactive link in an article, and once the interactive link is inserted, it is better not to have other links in the text, or there may be parsing error . Also, I am not sure if I can provide the h-entry and the links it contains in a correct format. Webmentioin Rocks! told me that I had not provide u-in-reply-to links appropriately during previous tests, though this seems like a bug . Having just talked about Webmentions, on my end of this website, the work that needs to be done is to parse the Webmentions and display them on the page. I chose webmention.js by PlaidWeb to get the work done, and made some adaptations to let the script use my own simple i18n system. In addition, I have also added the ability to switch between Comments and Webmentions, and added a manual send feature to the Webmentions interaction system. After all these operations, my website has obtained a lot of terrible codes, again…It’s time for me to keep doing my graduation project. The End “Not think this is cool? As a STEM guy, I find it extremely cool. It aligns perfectly with my vision of future life, where technology comes with a touch of amusement.” — The “STEM guy” meme of vlogger “老师好我叫何同学” ↩︎","categories":["Technologies & Studies"],"tags":["Network","Front-end","JavaScript","HTML","CSS"]},{"title":"Site Bilingual Modification","url":"/en/posts/7a6a6b5a.html","content":"This site is now available both in Chinese and in English. AI-generated summaryThe author discusses their decision to add an English version to their blog despite feeling uncertain about their fluency in both Chinese and English. They explain their approach to implementing bilingualism using Hexo, utilizing separate configurations and directories for each language's site. They detail the creation of language-switching functionality and address the challenge of directing visitors to the correct language version. The author concludes by expressing uncertainty about blogging in English but remains intrigued by the possibility. Honestly, I don’t know why I have decided to add an English version of my blog — I cannot write fluently in Chinese, let alone in English; I guess it’s only because it’s interesting and also, I want to see if adding another language is feasible. Hexo has a limited i18n system which can display a post in multiple languages, yet pages generated by themes are only available in single language. So I took a treacky approach, which is to generate both Chinese site and English site within the same repository, with each site using its own configuration, theme configuration, the source directory, and the public directory; and the rest of the contents required to generate sites such as the scaffolds directory and the scripts directory are shared between these sites. Thus, even though the Chinese site and the English site together is coherent, these are two indivisual sites with each static resources placed in its own public directory. To facilitate site generation, I wrote several scripts which are capable of cleaning up intermediates, including some of the same resources in the two source directories of both sites, switching the language used to generate the site based on parameters. You may have noticed that there is an “info icon” (It has moved to the lower right corner as a “language button” for now.) in the upper right corner of some posts (for example, this one) and pages. It indicates that the page you are reading is available in multiple languages, and you can switch to other versions just by clicking that icon. This feature is supported by a metadata generator and filter, an injector, and a broswer-end runtime script that I wrote. When I intend to write two language versions of a post, I provide an array of paths (each path represents the post in a specific language) in the front-matter, embed the metadata in the page via the metadata generator and filter, read it in the browser via the broswer-end script injected by the injector, and then display the “info icon”. The broswer-end script I mentioned is a script that I use to implement specific features and perform modifications dynamically. This script itself contains some prompt strings, so I also wrote simple i18n functions to provide these strings both in Chinese and in English. Now the website has two language versions, each has a root of /zh-CN/ or /en/. However, the previous links that search engines had indexed does not inlude the “language mark”, so I also wrote the index and 404 page for the entire site to direct visitors to the correct page. Basically, this is how I implemented a bilingual Hexo site. Maybe I’ll try to blog in English. Maybe. The End","categories":["Technologies & Studies"],"tags":["Front-end","JavaScript"]}]